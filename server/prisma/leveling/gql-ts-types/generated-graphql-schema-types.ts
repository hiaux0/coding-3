/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface Query {
  feed: Array<Post>;
  post?: Post;
  postsByUser: Array<Post>;
  todoItems: Array<TodoItem>;
}

export interface Post {
  author?: User;
  id: string;
  published: boolean;
  title: string;
}

export interface User {
  email?: string;
  id: string;
  name: string;
  posts?: Array<Post>;
}

export enum PostOrderByInput {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  published_ASC = 'published_ASC',
  published_DESC = 'published_DESC',
  title_ASC = 'title_ASC',
  title_DESC = 'title_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface PostWhereInput {
  AND?: Array<PostWhereInput>;
  author?: UserWhereInput;
  id?: string;
  id_contains?: string;
  id_ends_with?: string;
  id_gt?: string;
  id_gte?: string;
  id_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_not?: string;
  id_not_contains?: string;
  id_not_ends_with?: string;
  id_not_in?: Array<string>;
  id_not_starts_with?: string;
  id_starts_with?: string;
  NOT?: Array<PostWhereInput>;
  OR?: Array<PostWhereInput>;
  published?: boolean;
  published_not?: boolean;
  title?: string;
  title_contains?: string;
  title_ends_with?: string;
  title_gt?: string;
  title_gte?: string;
  title_in?: Array<string>;
  title_lt?: string;
  title_lte?: string;
  title_not?: string;
  title_not_contains?: string;
  title_not_ends_with?: string;
  title_not_in?: Array<string>;
  title_not_starts_with?: string;
  title_starts_with?: string;
}

export interface UserWhereInput {
  AND?: Array<UserWhereInput>;
  email?: string;
  email_contains?: string;
  email_ends_with?: string;
  email_gt?: string;
  email_gte?: string;
  email_in?: Array<string>;
  email_lt?: string;
  email_lte?: string;
  email_not?: string;
  email_not_contains?: string;
  email_not_ends_with?: string;
  email_not_in?: Array<string>;
  email_not_starts_with?: string;
  email_starts_with?: string;
  id?: string;
  id_contains?: string;
  id_ends_with?: string;
  id_gt?: string;
  id_gte?: string;
  id_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_not?: string;
  id_not_contains?: string;
  id_not_ends_with?: string;
  id_not_in?: Array<string>;
  id_not_starts_with?: string;
  id_starts_with?: string;
  name?: string;
  name_contains?: string;
  name_ends_with?: string;
  name_gt?: string;
  name_gte?: string;
  name_in?: Array<string>;
  name_lt?: string;
  name_lte?: string;
  name_not?: string;
  name_not_contains?: string;
  name_not_ends_with?: string;
  name_not_in?: Array<string>;
  name_not_starts_with?: string;
  name_starts_with?: string;
  NOT?: Array<UserWhereInput>;
  OR?: Array<UserWhereInput>;
  posts_every?: PostWhereInput;
  posts_none?: PostWhereInput;
  posts_some?: PostWhereInput;
}

export interface PostWhereUniqueInput {
  id?: string;
}

export enum TodoItemOrderByInput {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  done_ASC = 'done_ASC',
  done_DESC = 'done_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  text_ASC = 'text_ASC',
  text_DESC = 'text_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface TodoItemWhereInput {
  AND?: Array<TodoItemWhereInput>;
  done?: boolean;
  done_not?: boolean;
  id?: string;
  id_contains?: string;
  id_ends_with?: string;
  id_gt?: string;
  id_gte?: string;
  id_in?: Array<string>;
  id_lt?: string;
  id_lte?: string;
  id_not?: string;
  id_not_contains?: string;
  id_not_ends_with?: string;
  id_not_in?: Array<string>;
  id_not_starts_with?: string;
  id_starts_with?: string;
  NOT?: Array<TodoItemWhereInput>;
  OR?: Array<TodoItemWhereInput>;
  text?: string;
  text_contains?: string;
  text_ends_with?: string;
  text_gt?: string;
  text_gte?: string;
  text_in?: Array<string>;
  text_lt?: string;
  text_lte?: string;
  text_not?: string;
  text_not_contains?: string;
  text_not_ends_with?: string;
  text_not_in?: Array<string>;
  text_not_starts_with?: string;
  text_starts_with?: string;
}

export interface TodoItem {
  done?: boolean;
  id: string;
  text: string;
}

export interface Mutation {
  createDraft: Post;
  createTodoItem: TodoItem;
  createUser: User;
  deletePost?: Post;
  deleteTodoItem?: TodoItem;
  publish?: Post;
  updateTodoItem?: TodoItem;
}

export interface TodoItemCreateInput {
  done?: boolean;
  id?: string;
  text: string;
}

export interface UserCreateInput {
  email?: string;
  id?: string;
  name: string;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface PostCreateManyWithoutAuthorInput {
  connect?: Array<PostWhereUniqueInput>;
  create?: Array<PostCreateWithoutAuthorInput>;
}

export interface PostCreateWithoutAuthorInput {
  id?: string;
  published?: boolean;
  title: string;
}

export interface TodoItemWhereUniqueInput {
  id?: string;
}

export interface TodoItemUpdateInput {
  done?: boolean;
  text?: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface Resolver {
  Query?: QueryTypeResolver;
  Post?: PostTypeResolver;
  User?: UserTypeResolver;
  TodoItem?: TodoItemTypeResolver;
  Mutation?: MutationTypeResolver;
}
export interface QueryTypeResolver<TParent = any> {
  feed?: QueryToFeedResolver<TParent>;
  post?: QueryToPostResolver<TParent>;
  postsByUser?: QueryToPostsByUserResolver<TParent>;
  todoItems?: QueryToTodoItemsResolver<TParent>;
}

export interface QueryToFeedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPostArgs {
  where: PostWhereUniqueInput;
}
export interface QueryToPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPostsByUserArgs {
  email?: string;
}
export interface QueryToPostsByUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPostsByUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTodoItemsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: TodoItemOrderByInput;
  skip?: number;
  where?: TodoItemWhereInput;
}
export interface QueryToTodoItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTodoItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostTypeResolver<TParent = any> {
  author?: PostToAuthorResolver<TParent>;
  id?: PostToIdResolver<TParent>;
  published?: PostToPublishedResolver<TParent>;
  title?: PostToTitleResolver<TParent>;
}

export interface PostToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToPublishedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTypeResolver<TParent = any> {
  email?: UserToEmailResolver<TParent>;
  id?: UserToIdResolver<TParent>;
  name?: UserToNameResolver<TParent>;
  posts?: UserToPostsResolver<TParent>;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPostsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: PostOrderByInput;
  skip?: number;
  where?: PostWhereInput;
}
export interface UserToPostsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPostsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TodoItemTypeResolver<TParent = any> {
  done?: TodoItemToDoneResolver<TParent>;
  id?: TodoItemToIdResolver<TParent>;
  text?: TodoItemToTextResolver<TParent>;
}

export interface TodoItemToDoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TodoItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TodoItemToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationTypeResolver<TParent = any> {
  createDraft?: MutationToCreateDraftResolver<TParent>;
  createTodoItem?: MutationToCreateTodoItemResolver<TParent>;
  createUser?: MutationToCreateUserResolver<TParent>;
  deletePost?: MutationToDeletePostResolver<TParent>;
  deleteTodoItem?: MutationToDeleteTodoItemResolver<TParent>;
  publish?: MutationToPublishResolver<TParent>;
  updateTodoItem?: MutationToUpdateTodoItemResolver<TParent>;
}

export interface MutationToCreateDraftArgs {
  authorId?: string;
  title?: string;
}
export interface MutationToCreateDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateDraftArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateTodoItemArgs {
  data: TodoItemCreateInput;
}
export interface MutationToCreateTodoItemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateTodoItemArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateUserArgs {
  data: UserCreateInput;
}
export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePostArgs {
  where: PostWhereUniqueInput;
}
export interface MutationToDeletePostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePostArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteTodoItemArgs {
  where: TodoItemWhereUniqueInput;
}
export interface MutationToDeleteTodoItemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteTodoItemArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPublishArgs {
  id?: string;
}
export interface MutationToPublishResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPublishArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTodoItemArgs {
  data: TodoItemUpdateInput;
  where: TodoItemWhereUniqueInput;
}
export interface MutationToUpdateTodoItemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTodoItemArgs, context: any, info: GraphQLResolveInfo): TResult;
}
