// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregatePost {
  count: Int!
}

type AggregateTarotArcana {
  count: Int!
}

type AggregateTarotCard {
  count: Int!
}

type AggregateTarotExplanation {
  count: Int!
}

type AggregateTarotPage {
  count: Int!
}

type AggregateTodoItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createTarotArcana(data: TarotArcanaCreateInput!): TarotArcana!
  updateTarotArcana(data: TarotArcanaUpdateInput!, where: TarotArcanaWhereUniqueInput!): TarotArcana
  updateManyTarotArcanas(data: TarotArcanaUpdateManyMutationInput!, where: TarotArcanaWhereInput): BatchPayload!
  upsertTarotArcana(where: TarotArcanaWhereUniqueInput!, create: TarotArcanaCreateInput!, update: TarotArcanaUpdateInput!): TarotArcana!
  deleteTarotArcana(where: TarotArcanaWhereUniqueInput!): TarotArcana
  deleteManyTarotArcanas(where: TarotArcanaWhereInput): BatchPayload!
  createTarotCard(data: TarotCardCreateInput!): TarotCard!
  updateTarotCard(data: TarotCardUpdateInput!, where: TarotCardWhereUniqueInput!): TarotCard
  updateManyTarotCards(data: TarotCardUpdateManyMutationInput!, where: TarotCardWhereInput): BatchPayload!
  upsertTarotCard(where: TarotCardWhereUniqueInput!, create: TarotCardCreateInput!, update: TarotCardUpdateInput!): TarotCard!
  deleteTarotCard(where: TarotCardWhereUniqueInput!): TarotCard
  deleteManyTarotCards(where: TarotCardWhereInput): BatchPayload!
  createTarotExplanation(data: TarotExplanationCreateInput!): TarotExplanation!
  updateTarotExplanation(data: TarotExplanationUpdateInput!, where: TarotExplanationWhereUniqueInput!): TarotExplanation
  updateManyTarotExplanations(data: TarotExplanationUpdateManyMutationInput!, where: TarotExplanationWhereInput): BatchPayload!
  upsertTarotExplanation(where: TarotExplanationWhereUniqueInput!, create: TarotExplanationCreateInput!, update: TarotExplanationUpdateInput!): TarotExplanation!
  deleteTarotExplanation(where: TarotExplanationWhereUniqueInput!): TarotExplanation
  deleteManyTarotExplanations(where: TarotExplanationWhereInput): BatchPayload!
  createTarotPage(data: TarotPageCreateInput!): TarotPage!
  updateTarotPage(data: TarotPageUpdateInput!, where: TarotPageWhereUniqueInput!): TarotPage
  updateManyTarotPages(data: TarotPageUpdateManyMutationInput!, where: TarotPageWhereInput): BatchPayload!
  upsertTarotPage(where: TarotPageWhereUniqueInput!, create: TarotPageCreateInput!, update: TarotPageUpdateInput!): TarotPage!
  deleteTarotPage(where: TarotPageWhereUniqueInput!): TarotPage
  deleteManyTarotPages(where: TarotPageWhereInput): BatchPayload!
  createTodoItem(data: TodoItemCreateInput!): TodoItem!
  updateTodoItem(data: TodoItemUpdateInput!, where: TodoItemWhereUniqueInput!): TodoItem
  updateManyTodoItems(data: TodoItemUpdateManyMutationInput!, where: TodoItemWhereInput): BatchPayload!
  upsertTodoItem(where: TodoItemWhereUniqueInput!, create: TodoItemCreateInput!, update: TodoItemUpdateInput!): TodoItem!
  deleteTodoItem(where: TodoItemWhereUniqueInput!): TodoItem
  deleteManyTodoItems(where: TodoItemWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  published: Boolean!
  author: User
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  published: Boolean
  author: UserCreateOneWithoutPostsInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: ID
  title: String!
  published: Boolean
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  published_ASC
  published_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  published: Boolean!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  published: Boolean
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyDataInput {
  title: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  published: Boolean
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  author: UserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  tarotArcana(where: TarotArcanaWhereUniqueInput!): TarotArcana
  tarotArcanas(where: TarotArcanaWhereInput, orderBy: TarotArcanaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TarotArcana]!
  tarotArcanasConnection(where: TarotArcanaWhereInput, orderBy: TarotArcanaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TarotArcanaConnection!
  tarotCard(where: TarotCardWhereUniqueInput!): TarotCard
  tarotCards(where: TarotCardWhereInput, orderBy: TarotCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TarotCard]!
  tarotCardsConnection(where: TarotCardWhereInput, orderBy: TarotCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TarotCardConnection!
  tarotExplanation(where: TarotExplanationWhereUniqueInput!): TarotExplanation
  tarotExplanations(where: TarotExplanationWhereInput, orderBy: TarotExplanationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TarotExplanation]!
  tarotExplanationsConnection(where: TarotExplanationWhereInput, orderBy: TarotExplanationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TarotExplanationConnection!
  tarotPage(where: TarotPageWhereUniqueInput!): TarotPage
  tarotPages(where: TarotPageWhereInput, orderBy: TarotPageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TarotPage]!
  tarotPagesConnection(where: TarotPageWhereInput, orderBy: TarotPageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TarotPageConnection!
  todoItem(where: TodoItemWhereUniqueInput!): TodoItem
  todoItems(where: TodoItemWhereInput, orderBy: TodoItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TodoItem]!
  todoItemsConnection(where: TodoItemWhereInput, orderBy: TodoItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TodoItemConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  tarotArcana(where: TarotArcanaSubscriptionWhereInput): TarotArcanaSubscriptionPayload
  tarotCard(where: TarotCardSubscriptionWhereInput): TarotCardSubscriptionPayload
  tarotExplanation(where: TarotExplanationSubscriptionWhereInput): TarotExplanationSubscriptionPayload
  tarotPage(where: TarotPageSubscriptionWhereInput): TarotPageSubscriptionPayload
  todoItem(where: TodoItemSubscriptionWhereInput): TodoItemSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type TarotArcana {
  id: ID!
  family: String
  number: Int!
}

type TarotArcanaConnection {
  pageInfo: PageInfo!
  edges: [TarotArcanaEdge]!
  aggregate: AggregateTarotArcana!
}

input TarotArcanaCreateInput {
  id: ID
  family: String
  number: Int!
}

input TarotArcanaCreateOneInput {
  create: TarotArcanaCreateInput
  connect: TarotArcanaWhereUniqueInput
}

type TarotArcanaEdge {
  node: TarotArcana!
  cursor: String!
}

enum TarotArcanaOrderByInput {
  id_ASC
  id_DESC
  family_ASC
  family_DESC
  number_ASC
  number_DESC
}

type TarotArcanaPreviousValues {
  id: ID!
  family: String
  number: Int!
}

type TarotArcanaSubscriptionPayload {
  mutation: MutationType!
  node: TarotArcana
  updatedFields: [String!]
  previousValues: TarotArcanaPreviousValues
}

input TarotArcanaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TarotArcanaWhereInput
  AND: [TarotArcanaSubscriptionWhereInput!]
  OR: [TarotArcanaSubscriptionWhereInput!]
  NOT: [TarotArcanaSubscriptionWhereInput!]
}

input TarotArcanaUpdateDataInput {
  family: String
  number: Int
}

input TarotArcanaUpdateInput {
  family: String
  number: Int
}

input TarotArcanaUpdateManyMutationInput {
  family: String
  number: Int
}

input TarotArcanaUpdateOneInput {
  create: TarotArcanaCreateInput
  update: TarotArcanaUpdateDataInput
  upsert: TarotArcanaUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TarotArcanaWhereUniqueInput
}

input TarotArcanaUpsertNestedInput {
  update: TarotArcanaUpdateDataInput!
  create: TarotArcanaCreateInput!
}

input TarotArcanaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  family: String
  family_not: String
  family_in: [String!]
  family_not_in: [String!]
  family_lt: String
  family_lte: String
  family_gt: String
  family_gte: String
  family_contains: String
  family_not_contains: String
  family_starts_with: String
  family_not_starts_with: String
  family_ends_with: String
  family_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  AND: [TarotArcanaWhereInput!]
  OR: [TarotArcanaWhereInput!]
  NOT: [TarotArcanaWhereInput!]
}

input TarotArcanaWhereUniqueInput {
  id: ID
}

type TarotCard {
  id: ID!
  arcana: TarotArcana
  name: String!
  keyWords: [String!]!
  explanation(where: TarotExplanationWhereInput, orderBy: TarotExplanationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TarotExplanation!]
}

type TarotCardConnection {
  pageInfo: PageInfo!
  edges: [TarotCardEdge]!
  aggregate: AggregateTarotCard!
}

input TarotCardCreateInput {
  id: ID
  arcana: TarotArcanaCreateOneInput
  name: String!
  keyWords: TarotCardCreatekeyWordsInput
  explanation: TarotExplanationCreateManyWithoutCardNameInput
}

input TarotCardCreatekeyWordsInput {
  set: [String!]
}

input TarotCardCreateOneWithoutExplanationInput {
  create: TarotCardCreateWithoutExplanationInput
  connect: TarotCardWhereUniqueInput
}

input TarotCardCreateWithoutExplanationInput {
  id: ID
  arcana: TarotArcanaCreateOneInput
  name: String!
  keyWords: TarotCardCreatekeyWordsInput
}

type TarotCardEdge {
  node: TarotCard!
  cursor: String!
}

enum TarotCardOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TarotCardPreviousValues {
  id: ID!
  name: String!
  keyWords: [String!]!
}

type TarotCardSubscriptionPayload {
  mutation: MutationType!
  node: TarotCard
  updatedFields: [String!]
  previousValues: TarotCardPreviousValues
}

input TarotCardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TarotCardWhereInput
  AND: [TarotCardSubscriptionWhereInput!]
  OR: [TarotCardSubscriptionWhereInput!]
  NOT: [TarotCardSubscriptionWhereInput!]
}

input TarotCardUpdateInput {
  arcana: TarotArcanaUpdateOneInput
  name: String
  keyWords: TarotCardUpdatekeyWordsInput
  explanation: TarotExplanationUpdateManyWithoutCardNameInput
}

input TarotCardUpdatekeyWordsInput {
  set: [String!]
}

input TarotCardUpdateManyMutationInput {
  name: String
  keyWords: TarotCardUpdatekeyWordsInput
}

input TarotCardUpdateOneWithoutExplanationInput {
  create: TarotCardCreateWithoutExplanationInput
  update: TarotCardUpdateWithoutExplanationDataInput
  upsert: TarotCardUpsertWithoutExplanationInput
  delete: Boolean
  disconnect: Boolean
  connect: TarotCardWhereUniqueInput
}

input TarotCardUpdateWithoutExplanationDataInput {
  arcana: TarotArcanaUpdateOneInput
  name: String
  keyWords: TarotCardUpdatekeyWordsInput
}

input TarotCardUpsertWithoutExplanationInput {
  update: TarotCardUpdateWithoutExplanationDataInput!
  create: TarotCardCreateWithoutExplanationInput!
}

input TarotCardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  arcana: TarotArcanaWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  explanation_every: TarotExplanationWhereInput
  explanation_some: TarotExplanationWhereInput
  explanation_none: TarotExplanationWhereInput
  AND: [TarotCardWhereInput!]
  OR: [TarotCardWhereInput!]
  NOT: [TarotCardWhereInput!]
}

input TarotCardWhereUniqueInput {
  id: ID
}

type TarotExplanation {
  id: ID!
  content: String
  source: String!
  cardName: TarotCard
}

type TarotExplanationConnection {
  pageInfo: PageInfo!
  edges: [TarotExplanationEdge]!
  aggregate: AggregateTarotExplanation!
}

input TarotExplanationCreateInput {
  id: ID
  content: String
  source: String!
  cardName: TarotCardCreateOneWithoutExplanationInput
}

input TarotExplanationCreateManyWithoutCardNameInput {
  create: [TarotExplanationCreateWithoutCardNameInput!]
  connect: [TarotExplanationWhereUniqueInput!]
}

input TarotExplanationCreateWithoutCardNameInput {
  id: ID
  content: String
  source: String!
}

type TarotExplanationEdge {
  node: TarotExplanation!
  cursor: String!
}

enum TarotExplanationOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  source_ASC
  source_DESC
}

type TarotExplanationPreviousValues {
  id: ID!
  content: String
  source: String!
}

input TarotExplanationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  AND: [TarotExplanationScalarWhereInput!]
  OR: [TarotExplanationScalarWhereInput!]
  NOT: [TarotExplanationScalarWhereInput!]
}

type TarotExplanationSubscriptionPayload {
  mutation: MutationType!
  node: TarotExplanation
  updatedFields: [String!]
  previousValues: TarotExplanationPreviousValues
}

input TarotExplanationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TarotExplanationWhereInput
  AND: [TarotExplanationSubscriptionWhereInput!]
  OR: [TarotExplanationSubscriptionWhereInput!]
  NOT: [TarotExplanationSubscriptionWhereInput!]
}

input TarotExplanationUpdateInput {
  content: String
  source: String
  cardName: TarotCardUpdateOneWithoutExplanationInput
}

input TarotExplanationUpdateManyDataInput {
  content: String
  source: String
}

input TarotExplanationUpdateManyMutationInput {
  content: String
  source: String
}

input TarotExplanationUpdateManyWithoutCardNameInput {
  create: [TarotExplanationCreateWithoutCardNameInput!]
  delete: [TarotExplanationWhereUniqueInput!]
  connect: [TarotExplanationWhereUniqueInput!]
  set: [TarotExplanationWhereUniqueInput!]
  disconnect: [TarotExplanationWhereUniqueInput!]
  update: [TarotExplanationUpdateWithWhereUniqueWithoutCardNameInput!]
  upsert: [TarotExplanationUpsertWithWhereUniqueWithoutCardNameInput!]
  deleteMany: [TarotExplanationScalarWhereInput!]
  updateMany: [TarotExplanationUpdateManyWithWhereNestedInput!]
}

input TarotExplanationUpdateManyWithWhereNestedInput {
  where: TarotExplanationScalarWhereInput!
  data: TarotExplanationUpdateManyDataInput!
}

input TarotExplanationUpdateWithoutCardNameDataInput {
  content: String
  source: String
}

input TarotExplanationUpdateWithWhereUniqueWithoutCardNameInput {
  where: TarotExplanationWhereUniqueInput!
  data: TarotExplanationUpdateWithoutCardNameDataInput!
}

input TarotExplanationUpsertWithWhereUniqueWithoutCardNameInput {
  where: TarotExplanationWhereUniqueInput!
  update: TarotExplanationUpdateWithoutCardNameDataInput!
  create: TarotExplanationCreateWithoutCardNameInput!
}

input TarotExplanationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  cardName: TarotCardWhereInput
  AND: [TarotExplanationWhereInput!]
  OR: [TarotExplanationWhereInput!]
  NOT: [TarotExplanationWhereInput!]
}

input TarotExplanationWhereUniqueInput {
  id: ID
}

type TarotPage {
  id: ID!
  tarotFilterKeyWords: [String!]!
}

type TarotPageConnection {
  pageInfo: PageInfo!
  edges: [TarotPageEdge]!
  aggregate: AggregateTarotPage!
}

input TarotPageCreateInput {
  id: ID
  tarotFilterKeyWords: TarotPageCreatetarotFilterKeyWordsInput
}

input TarotPageCreatetarotFilterKeyWordsInput {
  set: [String!]
}

type TarotPageEdge {
  node: TarotPage!
  cursor: String!
}

enum TarotPageOrderByInput {
  id_ASC
  id_DESC
}

type TarotPagePreviousValues {
  id: ID!
  tarotFilterKeyWords: [String!]!
}

type TarotPageSubscriptionPayload {
  mutation: MutationType!
  node: TarotPage
  updatedFields: [String!]
  previousValues: TarotPagePreviousValues
}

input TarotPageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TarotPageWhereInput
  AND: [TarotPageSubscriptionWhereInput!]
  OR: [TarotPageSubscriptionWhereInput!]
  NOT: [TarotPageSubscriptionWhereInput!]
}

input TarotPageUpdateInput {
  tarotFilterKeyWords: TarotPageUpdatetarotFilterKeyWordsInput
}

input TarotPageUpdateManyMutationInput {
  tarotFilterKeyWords: TarotPageUpdatetarotFilterKeyWordsInput
}

input TarotPageUpdatetarotFilterKeyWordsInput {
  set: [String!]
}

input TarotPageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [TarotPageWhereInput!]
  OR: [TarotPageWhereInput!]
  NOT: [TarotPageWhereInput!]
}

input TarotPageWhereUniqueInput {
  id: ID
}

type TodoItem {
  id: ID!
  text: String!
  done: Boolean
}

type TodoItemConnection {
  pageInfo: PageInfo!
  edges: [TodoItemEdge]!
  aggregate: AggregateTodoItem!
}

input TodoItemCreateInput {
  id: ID
  text: String!
  done: Boolean
}

type TodoItemEdge {
  node: TodoItem!
  cursor: String!
}

enum TodoItemOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  done_ASC
  done_DESC
}

type TodoItemPreviousValues {
  id: ID!
  text: String!
  done: Boolean
}

type TodoItemSubscriptionPayload {
  mutation: MutationType!
  node: TodoItem
  updatedFields: [String!]
  previousValues: TodoItemPreviousValues
}

input TodoItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TodoItemWhereInput
  AND: [TodoItemSubscriptionWhereInput!]
  OR: [TodoItemSubscriptionWhereInput!]
  NOT: [TodoItemSubscriptionWhereInput!]
}

input TodoItemUpdateInput {
  text: String
  done: Boolean
}

input TodoItemUpdateManyMutationInput {
  text: String
  done: Boolean
}

input TodoItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  done: Boolean
  done_not: Boolean
  AND: [TodoItemWhereInput!]
  OR: [TodoItemWhereInput!]
  NOT: [TodoItemWhereInput!]
}

input TodoItemWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  email: String
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: ID
  email: String
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  name: String
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`