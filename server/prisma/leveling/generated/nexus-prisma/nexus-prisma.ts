/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Post: PostObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      PostConnection: PostConnectionObject
      PostEdge: PostEdgeObject
      AggregatePost: AggregatePostObject
      TodoItem: TodoItemObject
      TodoItemConnection: TodoItemConnectionObject
      TodoItemEdge: TodoItemEdgeObject
      AggregateTodoItem: AggregateTodoItemObject
      TarotArcana: TarotArcanaObject
      TarotArcanaConnection: TarotArcanaConnectionObject
      TarotArcanaEdge: TarotArcanaEdgeObject
      AggregateTarotArcana: AggregateTarotArcanaObject
      TarotExplanation: TarotExplanationObject
      TarotCard: TarotCardObject
      TarotExplanationConnection: TarotExplanationConnectionObject
      TarotExplanationEdge: TarotExplanationEdgeObject
      AggregateTarotExplanation: AggregateTarotExplanationObject
      TarotCardConnection: TarotCardConnectionObject
      TarotCardEdge: TarotCardEdgeObject
      AggregateTarotCard: AggregateTarotCardObject
      TarotPage: TarotPageObject
      TarotPageConnection: TarotPageConnectionObject
      TarotPageEdge: TarotPageEdgeObject
      AggregateTarotPage: AggregateTarotPageObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      PostSubscriptionPayload: PostSubscriptionPayloadObject
      PostPreviousValues: PostPreviousValuesObject
      TodoItemSubscriptionPayload: TodoItemSubscriptionPayloadObject
      TodoItemPreviousValues: TodoItemPreviousValuesObject
      TarotArcanaSubscriptionPayload: TarotArcanaSubscriptionPayloadObject
      TarotArcanaPreviousValues: TarotArcanaPreviousValuesObject
      TarotExplanationSubscriptionPayload: TarotExplanationSubscriptionPayloadObject
      TarotExplanationPreviousValues: TarotExplanationPreviousValuesObject
      TarotCardSubscriptionPayload: TarotCardSubscriptionPayloadObject
      TarotCardPreviousValues: TarotCardPreviousValuesObject
      TarotPageSubscriptionPayload: TarotPageSubscriptionPayloadObject
      TarotPagePreviousValues: TarotPagePreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Post: PostFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      PostConnection: PostConnectionFieldDetails
      PostEdge: PostEdgeFieldDetails
      AggregatePost: AggregatePostFieldDetails
      TodoItem: TodoItemFieldDetails
      TodoItemConnection: TodoItemConnectionFieldDetails
      TodoItemEdge: TodoItemEdgeFieldDetails
      AggregateTodoItem: AggregateTodoItemFieldDetails
      TarotArcana: TarotArcanaFieldDetails
      TarotArcanaConnection: TarotArcanaConnectionFieldDetails
      TarotArcanaEdge: TarotArcanaEdgeFieldDetails
      AggregateTarotArcana: AggregateTarotArcanaFieldDetails
      TarotExplanation: TarotExplanationFieldDetails
      TarotCard: TarotCardFieldDetails
      TarotExplanationConnection: TarotExplanationConnectionFieldDetails
      TarotExplanationEdge: TarotExplanationEdgeFieldDetails
      AggregateTarotExplanation: AggregateTarotExplanationFieldDetails
      TarotCardConnection: TarotCardConnectionFieldDetails
      TarotCardEdge: TarotCardEdgeFieldDetails
      AggregateTarotCard: AggregateTarotCardFieldDetails
      TarotPage: TarotPageFieldDetails
      TarotPageConnection: TarotPageConnectionFieldDetails
      TarotPageEdge: TarotPageEdgeFieldDetails
      AggregateTarotPage: AggregateTarotPageFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      PostSubscriptionPayload: PostSubscriptionPayloadFieldDetails
      PostPreviousValues: PostPreviousValuesFieldDetails
      TodoItemSubscriptionPayload: TodoItemSubscriptionPayloadFieldDetails
      TodoItemPreviousValues: TodoItemPreviousValuesFieldDetails
      TarotArcanaSubscriptionPayload: TarotArcanaSubscriptionPayloadFieldDetails
      TarotArcanaPreviousValues: TarotArcanaPreviousValuesFieldDetails
      TarotExplanationSubscriptionPayload: TarotExplanationSubscriptionPayloadFieldDetails
      TarotExplanationPreviousValues: TarotExplanationPreviousValuesFieldDetails
      TarotCardSubscriptionPayload: TarotCardSubscriptionPayloadFieldDetails
      TarotCardPreviousValues: TarotCardPreviousValuesFieldDetails
      TarotPageSubscriptionPayload: TarotPageSubscriptionPayloadFieldDetails
      TarotPagePreviousValues: TarotPagePreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      PostWhereInput: PostWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      PostWhereUniqueInput: PostWhereUniqueInputInputObject
      TodoItemWhereUniqueInput: TodoItemWhereUniqueInputInputObject
      TodoItemWhereInput: TodoItemWhereInputInputObject
      TarotArcanaWhereUniqueInput: TarotArcanaWhereUniqueInputInputObject
      TarotArcanaWhereInput: TarotArcanaWhereInputInputObject
      TarotExplanationWhereUniqueInput: TarotExplanationWhereUniqueInputInputObject
      TarotExplanationWhereInput: TarotExplanationWhereInputInputObject
      TarotCardWhereInput: TarotCardWhereInputInputObject
      TarotCardWhereUniqueInput: TarotCardWhereUniqueInputInputObject
      TarotPageWhereUniqueInput: TarotPageWhereUniqueInputInputObject
      TarotPageWhereInput: TarotPageWhereInputInputObject
      UserCreateInput: UserCreateInputInputObject
      PostCreateManyWithoutAuthorInput: PostCreateManyWithoutAuthorInputInputObject
      PostCreateWithoutAuthorInput: PostCreateWithoutAuthorInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      PostUpdateManyWithoutAuthorInput: PostUpdateManyWithoutAuthorInputInputObject
      PostUpdateWithWhereUniqueWithoutAuthorInput: PostUpdateWithWhereUniqueWithoutAuthorInputInputObject
      PostUpdateWithoutAuthorDataInput: PostUpdateWithoutAuthorDataInputInputObject
      PostUpsertWithWhereUniqueWithoutAuthorInput: PostUpsertWithWhereUniqueWithoutAuthorInputInputObject
      PostScalarWhereInput: PostScalarWhereInputInputObject
      PostUpdateManyWithWhereNestedInput: PostUpdateManyWithWhereNestedInputInputObject
      PostUpdateManyDataInput: PostUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      PostCreateInput: PostCreateInputInputObject
      UserCreateOneWithoutPostsInput: UserCreateOneWithoutPostsInputInputObject
      UserCreateWithoutPostsInput: UserCreateWithoutPostsInputInputObject
      PostUpdateInput: PostUpdateInputInputObject
      UserUpdateOneWithoutPostsInput: UserUpdateOneWithoutPostsInputInputObject
      UserUpdateWithoutPostsDataInput: UserUpdateWithoutPostsDataInputInputObject
      UserUpsertWithoutPostsInput: UserUpsertWithoutPostsInputInputObject
      PostUpdateManyMutationInput: PostUpdateManyMutationInputInputObject
      TodoItemCreateInput: TodoItemCreateInputInputObject
      TodoItemUpdateInput: TodoItemUpdateInputInputObject
      TodoItemUpdateManyMutationInput: TodoItemUpdateManyMutationInputInputObject
      TarotArcanaCreateInput: TarotArcanaCreateInputInputObject
      TarotArcanaUpdateInput: TarotArcanaUpdateInputInputObject
      TarotArcanaUpdateManyMutationInput: TarotArcanaUpdateManyMutationInputInputObject
      TarotExplanationCreateInput: TarotExplanationCreateInputInputObject
      TarotCardCreateOneWithoutExplanationInput: TarotCardCreateOneWithoutExplanationInputInputObject
      TarotCardCreateWithoutExplanationInput: TarotCardCreateWithoutExplanationInputInputObject
      TarotArcanaCreateOneInput: TarotArcanaCreateOneInputInputObject
      TarotCardCreatekeyWordsInput: TarotCardCreatekeyWordsInputInputObject
      TarotExplanationUpdateInput: TarotExplanationUpdateInputInputObject
      TarotCardUpdateOneWithoutExplanationInput: TarotCardUpdateOneWithoutExplanationInputInputObject
      TarotCardUpdateWithoutExplanationDataInput: TarotCardUpdateWithoutExplanationDataInputInputObject
      TarotArcanaUpdateOneInput: TarotArcanaUpdateOneInputInputObject
      TarotArcanaUpdateDataInput: TarotArcanaUpdateDataInputInputObject
      TarotArcanaUpsertNestedInput: TarotArcanaUpsertNestedInputInputObject
      TarotCardUpdatekeyWordsInput: TarotCardUpdatekeyWordsInputInputObject
      TarotCardUpsertWithoutExplanationInput: TarotCardUpsertWithoutExplanationInputInputObject
      TarotExplanationUpdateManyMutationInput: TarotExplanationUpdateManyMutationInputInputObject
      TarotCardCreateInput: TarotCardCreateInputInputObject
      TarotExplanationCreateManyWithoutCardNameInput: TarotExplanationCreateManyWithoutCardNameInputInputObject
      TarotExplanationCreateWithoutCardNameInput: TarotExplanationCreateWithoutCardNameInputInputObject
      TarotCardUpdateInput: TarotCardUpdateInputInputObject
      TarotExplanationUpdateManyWithoutCardNameInput: TarotExplanationUpdateManyWithoutCardNameInputInputObject
      TarotExplanationUpdateWithWhereUniqueWithoutCardNameInput: TarotExplanationUpdateWithWhereUniqueWithoutCardNameInputInputObject
      TarotExplanationUpdateWithoutCardNameDataInput: TarotExplanationUpdateWithoutCardNameDataInputInputObject
      TarotExplanationUpsertWithWhereUniqueWithoutCardNameInput: TarotExplanationUpsertWithWhereUniqueWithoutCardNameInputInputObject
      TarotExplanationScalarWhereInput: TarotExplanationScalarWhereInputInputObject
      TarotExplanationUpdateManyWithWhereNestedInput: TarotExplanationUpdateManyWithWhereNestedInputInputObject
      TarotExplanationUpdateManyDataInput: TarotExplanationUpdateManyDataInputInputObject
      TarotCardUpdateManyMutationInput: TarotCardUpdateManyMutationInputInputObject
      TarotPageCreateInput: TarotPageCreateInputInputObject
      TarotPageCreatetarotFilterKeyWordsInput: TarotPageCreatetarotFilterKeyWordsInputInputObject
      TarotPageUpdateInput: TarotPageUpdateInputInputObject
      TarotPageUpdatetarotFilterKeyWordsInput: TarotPageUpdatetarotFilterKeyWordsInputInputObject
      TarotPageUpdateManyMutationInput: TarotPageUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      PostSubscriptionWhereInput: PostSubscriptionWhereInputInputObject
      TodoItemSubscriptionWhereInput: TodoItemSubscriptionWhereInputInputObject
      TarotArcanaSubscriptionWhereInput: TarotArcanaSubscriptionWhereInputInputObject
      TarotExplanationSubscriptionWhereInput: TarotExplanationSubscriptionWhereInputInputObject
      TarotCardSubscriptionWhereInput: TarotCardSubscriptionWhereInputInputObject
      TarotPageSubscriptionWhereInput: TarotPageSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    PostOrderByInput: PostOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    TodoItemOrderByInput: TodoItemOrderByInputValues,
    TarotArcanaOrderByInput: TarotArcanaOrderByInputValues,
    TarotExplanationOrderByInput: TarotExplanationOrderByInputValues,
    TarotCardOrderByInput: TarotCardOrderByInputValues,
    TarotPageOrderByInput: TarotPageOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'post', args?: QueryPostArgs[] | false, alias?: string  } 
  | { name: 'posts', args?: QueryPostsArgs[] | false, alias?: string  } 
  | { name: 'postsConnection', args?: QueryPostsConnectionArgs[] | false, alias?: string  } 
  | { name: 'todoItem', args?: QueryTodoItemArgs[] | false, alias?: string  } 
  | { name: 'todoItems', args?: QueryTodoItemsArgs[] | false, alias?: string  } 
  | { name: 'todoItemsConnection', args?: QueryTodoItemsConnectionArgs[] | false, alias?: string  } 
  | { name: 'tarotArcana', args?: QueryTarotArcanaArgs[] | false, alias?: string  } 
  | { name: 'tarotArcanas', args?: QueryTarotArcanasArgs[] | false, alias?: string  } 
  | { name: 'tarotArcanasConnection', args?: QueryTarotArcanasConnectionArgs[] | false, alias?: string  } 
  | { name: 'tarotExplanation', args?: QueryTarotExplanationArgs[] | false, alias?: string  } 
  | { name: 'tarotExplanations', args?: QueryTarotExplanationsArgs[] | false, alias?: string  } 
  | { name: 'tarotExplanationsConnection', args?: QueryTarotExplanationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'tarotCard', args?: QueryTarotCardArgs[] | false, alias?: string  } 
  | { name: 'tarotCards', args?: QueryTarotCardsArgs[] | false, alias?: string  } 
  | { name: 'tarotCardsConnection', args?: QueryTarotCardsConnectionArgs[] | false, alias?: string  } 
  | { name: 'tarotPage', args?: QueryTarotPageArgs[] | false, alias?: string  } 
  | { name: 'tarotPages', args?: QueryTarotPagesArgs[] | false, alias?: string  } 
  | { name: 'tarotPagesConnection', args?: QueryTarotPagesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'post'
  | 'posts'
  | 'postsConnection'
  | 'todoItem'
  | 'todoItems'
  | 'todoItemsConnection'
  | 'tarotArcana'
  | 'tarotArcanas'
  | 'tarotArcanasConnection'
  | 'tarotExplanation'
  | 'tarotExplanations'
  | 'tarotExplanationsConnection'
  | 'tarotCard'
  | 'tarotCards'
  | 'tarotCardsConnection'
  | 'tarotPage'
  | 'tarotPages'
  | 'tarotPagesConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostArgs =
  | 'where'
type QueryPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTodoItemArgs =
  | 'where'
type QueryTodoItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTodoItemsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTarotArcanaArgs =
  | 'where'
type QueryTarotArcanasArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTarotArcanasConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTarotExplanationArgs =
  | 'where'
type QueryTarotExplanationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTarotExplanationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTarotCardArgs =
  | 'where'
type QueryTarotCardsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTarotCardsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTarotPageArgs =
  | 'where'
type QueryTarotPagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTarotPagesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  post: {
    type: 'Post'
    args: Record<QueryPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  posts: {
    type: 'Post'
    args: Record<QueryPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
  postsConnection: {
    type: 'PostConnection'
    args: Record<QueryPostsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostConnection> | prisma.PostConnection
  }
  todoItem: {
    type: 'TodoItem'
    args: Record<QueryTodoItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TodoItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItem | null> | prisma.TodoItem | null
  }
  todoItems: {
    type: 'TodoItem'
    args: Record<QueryTodoItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TodoItemWhereInput | null, orderBy?: prisma.TodoItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItem[]> | prisma.TodoItem[]
  }
  todoItemsConnection: {
    type: 'TodoItemConnection'
    args: Record<QueryTodoItemsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TodoItemWhereInput | null, orderBy?: prisma.TodoItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItemConnection> | prisma.TodoItemConnection
  }
  tarotArcana: {
    type: 'TarotArcana'
    args: Record<QueryTarotArcanaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TarotArcanaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcana | null> | prisma.TarotArcana | null
  }
  tarotArcanas: {
    type: 'TarotArcana'
    args: Record<QueryTarotArcanasArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TarotArcanaWhereInput | null, orderBy?: prisma.TarotArcanaOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcana[]> | prisma.TarotArcana[]
  }
  tarotArcanasConnection: {
    type: 'TarotArcanaConnection'
    args: Record<QueryTarotArcanasConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TarotArcanaWhereInput | null, orderBy?: prisma.TarotArcanaOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcanaConnection> | prisma.TarotArcanaConnection
  }
  tarotExplanation: {
    type: 'TarotExplanation'
    args: Record<QueryTarotExplanationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TarotExplanationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanation | null> | prisma.TarotExplanation | null
  }
  tarotExplanations: {
    type: 'TarotExplanation'
    args: Record<QueryTarotExplanationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TarotExplanationWhereInput | null, orderBy?: prisma.TarotExplanationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanation[]> | prisma.TarotExplanation[]
  }
  tarotExplanationsConnection: {
    type: 'TarotExplanationConnection'
    args: Record<QueryTarotExplanationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TarotExplanationWhereInput | null, orderBy?: prisma.TarotExplanationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanationConnection> | prisma.TarotExplanationConnection
  }
  tarotCard: {
    type: 'TarotCard'
    args: Record<QueryTarotCardArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TarotCardWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCard | null> | prisma.TarotCard | null
  }
  tarotCards: {
    type: 'TarotCard'
    args: Record<QueryTarotCardsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TarotCardWhereInput | null, orderBy?: prisma.TarotCardOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCard[]> | prisma.TarotCard[]
  }
  tarotCardsConnection: {
    type: 'TarotCardConnection'
    args: Record<QueryTarotCardsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TarotCardWhereInput | null, orderBy?: prisma.TarotCardOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCardConnection> | prisma.TarotCardConnection
  }
  tarotPage: {
    type: 'TarotPage'
    args: Record<QueryTarotPageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TarotPageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPage | null> | prisma.TarotPage | null
  }
  tarotPages: {
    type: 'TarotPage'
    args: Record<QueryTarotPagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TarotPageWhereInput | null, orderBy?: prisma.TarotPageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPage[]> | prisma.TarotPage[]
  }
  tarotPagesConnection: {
    type: 'TarotPageConnection'
    args: Record<QueryTarotPagesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TarotPageWhereInput | null, orderBy?: prisma.TarotPageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPageConnection> | prisma.TarotPageConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'posts', args?: UserPostsArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'name'
  | 'posts'


type UserPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  posts: {
    type: 'Post'
    args: Record<UserPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
}
  

// Types for Post

type PostObject =
  | PostFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 

type PostFields =
  | 'id'
  | 'title'
  | 'published'
  | 'author'



  

export interface PostFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Post">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostConnection

type PostConnectionObject =
  | PostConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostEdge[]> | prisma.PostEdge[]
  }
  aggregate: {
    type: 'AggregatePost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePost> | prisma.AggregatePost
  }
}
  

// Types for PostEdge

type PostEdgeObject =
  | PostEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostEdgeFieldDetails {
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePost

type AggregatePostObject =
  | AggregatePostFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostFields =
  | 'count'



  

export interface AggregatePostFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TodoItem

type TodoItemObject =
  | TodoItemFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 
  | { name: 'done', args?: [] | false, alias?: string  } 

type TodoItemFields =
  | 'id'
  | 'text'
  | 'done'



  

export interface TodoItemFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  done: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TodoItemConnection

type TodoItemConnectionObject =
  | TodoItemConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TodoItemConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TodoItemConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TodoItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TodoItemEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TodoItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItemEdge[]> | prisma.TodoItemEdge[]
  }
  aggregate: {
    type: 'AggregateTodoItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TodoItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTodoItem> | prisma.AggregateTodoItem
  }
}
  

// Types for TodoItemEdge

type TodoItemEdgeObject =
  | TodoItemEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TodoItemEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TodoItemEdgeFieldDetails {
  node: {
    type: 'TodoItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TodoItemEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItem> | prisma.TodoItem
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTodoItem

type AggregateTodoItemObject =
  | AggregateTodoItemFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTodoItemFields =
  | 'count'



  

export interface AggregateTodoItemFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TarotArcana

type TarotArcanaObject =
  | TarotArcanaFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'family', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 

type TarotArcanaFields =
  | 'id'
  | 'family'
  | 'number'



  

export interface TarotArcanaFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  family: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TarotArcanaConnection

type TarotArcanaConnectionObject =
  | TarotArcanaConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TarotArcanaConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TarotArcanaConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotArcanaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TarotArcanaEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TarotArcanaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcanaEdge[]> | prisma.TarotArcanaEdge[]
  }
  aggregate: {
    type: 'AggregateTarotArcana'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotArcanaConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTarotArcana> | prisma.AggregateTarotArcana
  }
}
  

// Types for TarotArcanaEdge

type TarotArcanaEdgeObject =
  | TarotArcanaEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TarotArcanaEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TarotArcanaEdgeFieldDetails {
  node: {
    type: 'TarotArcana'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotArcanaEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcana> | prisma.TarotArcana
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTarotArcana

type AggregateTarotArcanaObject =
  | AggregateTarotArcanaFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTarotArcanaFields =
  | 'count'



  

export interface AggregateTarotArcanaFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TarotExplanation

type TarotExplanationObject =
  | TarotExplanationFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'source', args?: [] | false, alias?: string  } 
  | { name: 'cardName', args?: [] | false, alias?: string  } 

type TarotExplanationFields =
  | 'id'
  | 'content'
  | 'source'
  | 'cardName'



  

export interface TarotExplanationFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  source: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cardName: {
    type: 'TarotCard'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TarotExplanation">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCard | null> | prisma.TarotCard | null
  }
}
  

// Types for TarotCard

type TarotCardObject =
  | TarotCardFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'arcana', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'keyWords', args?: [] | false, alias?: string  } 
  | { name: 'explanation', args?: TarotCardExplanationArgs[] | false, alias?: string  } 

type TarotCardFields =
  | 'id'
  | 'arcana'
  | 'name'
  | 'keyWords'
  | 'explanation'


type TarotCardExplanationArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TarotCardFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  arcana: {
    type: 'TarotArcana'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TarotCard">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcana | null> | prisma.TarotArcana | null
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  keyWords: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  explanation: {
    type: 'TarotExplanation'
    args: Record<TarotCardExplanationArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TarotCard">,
      args: { where?: TarotExplanationWhereInput | null, orderBy?: prisma.TarotExplanationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanation[]> | prisma.TarotExplanation[]
  }
}
  

// Types for TarotExplanationConnection

type TarotExplanationConnectionObject =
  | TarotExplanationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TarotExplanationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TarotExplanationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotExplanationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TarotExplanationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TarotExplanationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanationEdge[]> | prisma.TarotExplanationEdge[]
  }
  aggregate: {
    type: 'AggregateTarotExplanation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotExplanationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTarotExplanation> | prisma.AggregateTarotExplanation
  }
}
  

// Types for TarotExplanationEdge

type TarotExplanationEdgeObject =
  | TarotExplanationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TarotExplanationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TarotExplanationEdgeFieldDetails {
  node: {
    type: 'TarotExplanation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotExplanationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanation> | prisma.TarotExplanation
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTarotExplanation

type AggregateTarotExplanationObject =
  | AggregateTarotExplanationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTarotExplanationFields =
  | 'count'



  

export interface AggregateTarotExplanationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TarotCardConnection

type TarotCardConnectionObject =
  | TarotCardConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TarotCardConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TarotCardConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotCardConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TarotCardEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TarotCardConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCardEdge[]> | prisma.TarotCardEdge[]
  }
  aggregate: {
    type: 'AggregateTarotCard'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotCardConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTarotCard> | prisma.AggregateTarotCard
  }
}
  

// Types for TarotCardEdge

type TarotCardEdgeObject =
  | TarotCardEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TarotCardEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TarotCardEdgeFieldDetails {
  node: {
    type: 'TarotCard'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotCardEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCard> | prisma.TarotCard
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTarotCard

type AggregateTarotCardObject =
  | AggregateTarotCardFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTarotCardFields =
  | 'count'



  

export interface AggregateTarotCardFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TarotPage

type TarotPageObject =
  | TarotPageFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'tarotFilterKeyWords', args?: [] | false, alias?: string  } 

type TarotPageFields =
  | 'id'
  | 'tarotFilterKeyWords'



  

export interface TarotPageFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tarotFilterKeyWords: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  

// Types for TarotPageConnection

type TarotPageConnectionObject =
  | TarotPageConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TarotPageConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TarotPageConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotPageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TarotPageEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TarotPageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPageEdge[]> | prisma.TarotPageEdge[]
  }
  aggregate: {
    type: 'AggregateTarotPage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotPageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTarotPage> | prisma.AggregateTarotPage
  }
}
  

// Types for TarotPageEdge

type TarotPageEdgeObject =
  | TarotPageEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TarotPageEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TarotPageEdgeFieldDetails {
  node: {
    type: 'TarotPage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotPageEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPage> | prisma.TarotPage
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTarotPage

type AggregateTarotPageObject =
  | AggregateTarotPageFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTarotPageFields =
  | 'count'



  

export interface AggregateTarotPageFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createPost', args?: MutationCreatePostArgs[] | false, alias?: string  } 
  | { name: 'updatePost', args?: MutationUpdatePostArgs[] | false, alias?: string  } 
  | { name: 'updateManyPosts', args?: MutationUpdateManyPostsArgs[] | false, alias?: string  } 
  | { name: 'upsertPost', args?: MutationUpsertPostArgs[] | false, alias?: string  } 
  | { name: 'deletePost', args?: MutationDeletePostArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPosts', args?: MutationDeleteManyPostsArgs[] | false, alias?: string  } 
  | { name: 'createTodoItem', args?: MutationCreateTodoItemArgs[] | false, alias?: string  } 
  | { name: 'updateTodoItem', args?: MutationUpdateTodoItemArgs[] | false, alias?: string  } 
  | { name: 'updateManyTodoItems', args?: MutationUpdateManyTodoItemsArgs[] | false, alias?: string  } 
  | { name: 'upsertTodoItem', args?: MutationUpsertTodoItemArgs[] | false, alias?: string  } 
  | { name: 'deleteTodoItem', args?: MutationDeleteTodoItemArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTodoItems', args?: MutationDeleteManyTodoItemsArgs[] | false, alias?: string  } 
  | { name: 'createTarotArcana', args?: MutationCreateTarotArcanaArgs[] | false, alias?: string  } 
  | { name: 'updateTarotArcana', args?: MutationUpdateTarotArcanaArgs[] | false, alias?: string  } 
  | { name: 'updateManyTarotArcanas', args?: MutationUpdateManyTarotArcanasArgs[] | false, alias?: string  } 
  | { name: 'upsertTarotArcana', args?: MutationUpsertTarotArcanaArgs[] | false, alias?: string  } 
  | { name: 'deleteTarotArcana', args?: MutationDeleteTarotArcanaArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTarotArcanas', args?: MutationDeleteManyTarotArcanasArgs[] | false, alias?: string  } 
  | { name: 'createTarotExplanation', args?: MutationCreateTarotExplanationArgs[] | false, alias?: string  } 
  | { name: 'updateTarotExplanation', args?: MutationUpdateTarotExplanationArgs[] | false, alias?: string  } 
  | { name: 'updateManyTarotExplanations', args?: MutationUpdateManyTarotExplanationsArgs[] | false, alias?: string  } 
  | { name: 'upsertTarotExplanation', args?: MutationUpsertTarotExplanationArgs[] | false, alias?: string  } 
  | { name: 'deleteTarotExplanation', args?: MutationDeleteTarotExplanationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTarotExplanations', args?: MutationDeleteManyTarotExplanationsArgs[] | false, alias?: string  } 
  | { name: 'createTarotCard', args?: MutationCreateTarotCardArgs[] | false, alias?: string  } 
  | { name: 'updateTarotCard', args?: MutationUpdateTarotCardArgs[] | false, alias?: string  } 
  | { name: 'updateManyTarotCards', args?: MutationUpdateManyTarotCardsArgs[] | false, alias?: string  } 
  | { name: 'upsertTarotCard', args?: MutationUpsertTarotCardArgs[] | false, alias?: string  } 
  | { name: 'deleteTarotCard', args?: MutationDeleteTarotCardArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTarotCards', args?: MutationDeleteManyTarotCardsArgs[] | false, alias?: string  } 
  | { name: 'createTarotPage', args?: MutationCreateTarotPageArgs[] | false, alias?: string  } 
  | { name: 'updateTarotPage', args?: MutationUpdateTarotPageArgs[] | false, alias?: string  } 
  | { name: 'updateManyTarotPages', args?: MutationUpdateManyTarotPagesArgs[] | false, alias?: string  } 
  | { name: 'upsertTarotPage', args?: MutationUpsertTarotPageArgs[] | false, alias?: string  } 
  | { name: 'deleteTarotPage', args?: MutationDeleteTarotPageArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTarotPages', args?: MutationDeleteManyTarotPagesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createPost'
  | 'updatePost'
  | 'updateManyPosts'
  | 'upsertPost'
  | 'deletePost'
  | 'deleteManyPosts'
  | 'createTodoItem'
  | 'updateTodoItem'
  | 'updateManyTodoItems'
  | 'upsertTodoItem'
  | 'deleteTodoItem'
  | 'deleteManyTodoItems'
  | 'createTarotArcana'
  | 'updateTarotArcana'
  | 'updateManyTarotArcanas'
  | 'upsertTarotArcana'
  | 'deleteTarotArcana'
  | 'deleteManyTarotArcanas'
  | 'createTarotExplanation'
  | 'updateTarotExplanation'
  | 'updateManyTarotExplanations'
  | 'upsertTarotExplanation'
  | 'deleteTarotExplanation'
  | 'deleteManyTarotExplanations'
  | 'createTarotCard'
  | 'updateTarotCard'
  | 'updateManyTarotCards'
  | 'upsertTarotCard'
  | 'deleteTarotCard'
  | 'deleteManyTarotCards'
  | 'createTarotPage'
  | 'updateTarotPage'
  | 'updateManyTarotPages'
  | 'upsertTarotPage'
  | 'deleteTarotPage'
  | 'deleteManyTarotPages'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreatePostArgs =
  | 'data'
type MutationUpdatePostArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostArgs =
  | 'where'
type MutationDeleteManyPostsArgs =
  | 'where'
type MutationCreateTodoItemArgs =
  | 'data'
type MutationUpdateTodoItemArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTodoItemsArgs =
  | 'data'
  | 'where'
type MutationUpsertTodoItemArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTodoItemArgs =
  | 'where'
type MutationDeleteManyTodoItemsArgs =
  | 'where'
type MutationCreateTarotArcanaArgs =
  | 'data'
type MutationUpdateTarotArcanaArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTarotArcanasArgs =
  | 'data'
  | 'where'
type MutationUpsertTarotArcanaArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTarotArcanaArgs =
  | 'where'
type MutationDeleteManyTarotArcanasArgs =
  | 'where'
type MutationCreateTarotExplanationArgs =
  | 'data'
type MutationUpdateTarotExplanationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTarotExplanationsArgs =
  | 'data'
  | 'where'
type MutationUpsertTarotExplanationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTarotExplanationArgs =
  | 'where'
type MutationDeleteManyTarotExplanationsArgs =
  | 'where'
type MutationCreateTarotCardArgs =
  | 'data'
type MutationUpdateTarotCardArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTarotCardsArgs =
  | 'data'
  | 'where'
type MutationUpsertTarotCardArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTarotCardArgs =
  | 'where'
type MutationDeleteManyTarotCardsArgs =
  | 'where'
type MutationCreateTarotPageArgs =
  | 'data'
type MutationUpdateTarotPageArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTarotPagesArgs =
  | 'data'
  | 'where'
type MutationUpsertTarotPageArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTarotPageArgs =
  | 'where'
type MutationDeleteManyTarotPagesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPost: {
    type: 'Post'
    args: Record<MutationCreatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  updatePost: {
    type: 'Post'
    args: Record<MutationUpdatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateInput, where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updateManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateManyMutationInput, where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPost: {
    type: 'Post'
    args: Record<MutationUpsertPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  deletePost: {
    type: 'Post'
    args: Record<MutationDeletePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  deleteManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTodoItem: {
    type: 'TodoItem'
    args: Record<MutationCreateTodoItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TodoItemCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItem> | prisma.TodoItem
  }
  updateTodoItem: {
    type: 'TodoItem'
    args: Record<MutationUpdateTodoItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TodoItemUpdateInput, where: TodoItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItem | null> | prisma.TodoItem | null
  }
  updateManyTodoItems: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTodoItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TodoItemUpdateManyMutationInput, where?: TodoItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTodoItem: {
    type: 'TodoItem'
    args: Record<MutationUpsertTodoItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TodoItemWhereUniqueInput, create: TodoItemCreateInput, update: TodoItemUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItem> | prisma.TodoItem
  }
  deleteTodoItem: {
    type: 'TodoItem'
    args: Record<MutationDeleteTodoItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TodoItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItem | null> | prisma.TodoItem | null
  }
  deleteManyTodoItems: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTodoItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TodoItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTarotArcana: {
    type: 'TarotArcana'
    args: Record<MutationCreateTarotArcanaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotArcanaCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcana> | prisma.TarotArcana
  }
  updateTarotArcana: {
    type: 'TarotArcana'
    args: Record<MutationUpdateTarotArcanaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotArcanaUpdateInput, where: TarotArcanaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcana | null> | prisma.TarotArcana | null
  }
  updateManyTarotArcanas: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTarotArcanasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotArcanaUpdateManyMutationInput, where?: TarotArcanaWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTarotArcana: {
    type: 'TarotArcana'
    args: Record<MutationUpsertTarotArcanaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TarotArcanaWhereUniqueInput, create: TarotArcanaCreateInput, update: TarotArcanaUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcana> | prisma.TarotArcana
  }
  deleteTarotArcana: {
    type: 'TarotArcana'
    args: Record<MutationDeleteTarotArcanaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TarotArcanaWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcana | null> | prisma.TarotArcana | null
  }
  deleteManyTarotArcanas: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTarotArcanasArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TarotArcanaWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTarotExplanation: {
    type: 'TarotExplanation'
    args: Record<MutationCreateTarotExplanationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotExplanationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanation> | prisma.TarotExplanation
  }
  updateTarotExplanation: {
    type: 'TarotExplanation'
    args: Record<MutationUpdateTarotExplanationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotExplanationUpdateInput, where: TarotExplanationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanation | null> | prisma.TarotExplanation | null
  }
  updateManyTarotExplanations: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTarotExplanationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotExplanationUpdateManyMutationInput, where?: TarotExplanationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTarotExplanation: {
    type: 'TarotExplanation'
    args: Record<MutationUpsertTarotExplanationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TarotExplanationWhereUniqueInput, create: TarotExplanationCreateInput, update: TarotExplanationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanation> | prisma.TarotExplanation
  }
  deleteTarotExplanation: {
    type: 'TarotExplanation'
    args: Record<MutationDeleteTarotExplanationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TarotExplanationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanation | null> | prisma.TarotExplanation | null
  }
  deleteManyTarotExplanations: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTarotExplanationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TarotExplanationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTarotCard: {
    type: 'TarotCard'
    args: Record<MutationCreateTarotCardArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotCardCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCard> | prisma.TarotCard
  }
  updateTarotCard: {
    type: 'TarotCard'
    args: Record<MutationUpdateTarotCardArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotCardUpdateInput, where: TarotCardWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCard | null> | prisma.TarotCard | null
  }
  updateManyTarotCards: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTarotCardsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotCardUpdateManyMutationInput, where?: TarotCardWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTarotCard: {
    type: 'TarotCard'
    args: Record<MutationUpsertTarotCardArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TarotCardWhereUniqueInput, create: TarotCardCreateInput, update: TarotCardUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCard> | prisma.TarotCard
  }
  deleteTarotCard: {
    type: 'TarotCard'
    args: Record<MutationDeleteTarotCardArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TarotCardWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCard | null> | prisma.TarotCard | null
  }
  deleteManyTarotCards: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTarotCardsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TarotCardWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTarotPage: {
    type: 'TarotPage'
    args: Record<MutationCreateTarotPageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotPageCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPage> | prisma.TarotPage
  }
  updateTarotPage: {
    type: 'TarotPage'
    args: Record<MutationUpdateTarotPageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotPageUpdateInput, where: TarotPageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPage | null> | prisma.TarotPage | null
  }
  updateManyTarotPages: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTarotPagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TarotPageUpdateManyMutationInput, where?: TarotPageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTarotPage: {
    type: 'TarotPage'
    args: Record<MutationUpsertTarotPageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TarotPageWhereUniqueInput, create: TarotPageCreateInput, update: TarotPageUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPage> | prisma.TarotPage
  }
  deleteTarotPage: {
    type: 'TarotPage'
    args: Record<MutationDeleteTarotPageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TarotPageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPage | null> | prisma.TarotPage | null
  }
  deleteManyTarotPages: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTarotPagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TarotPageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'post', args?: SubscriptionPostArgs[] | false, alias?: string  } 
  | { name: 'todoItem', args?: SubscriptionTodoItemArgs[] | false, alias?: string  } 
  | { name: 'tarotArcana', args?: SubscriptionTarotArcanaArgs[] | false, alias?: string  } 
  | { name: 'tarotExplanation', args?: SubscriptionTarotExplanationArgs[] | false, alias?: string  } 
  | { name: 'tarotCard', args?: SubscriptionTarotCardArgs[] | false, alias?: string  } 
  | { name: 'tarotPage', args?: SubscriptionTarotPageArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'post'
  | 'todoItem'
  | 'tarotArcana'
  | 'tarotExplanation'
  | 'tarotCard'
  | 'tarotPage'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionPostArgs =
  | 'where'
type SubscriptionTodoItemArgs =
  | 'where'
type SubscriptionTarotArcanaArgs =
  | 'where'
type SubscriptionTarotExplanationArgs =
  | 'where'
type SubscriptionTarotCardArgs =
  | 'where'
type SubscriptionTarotPageArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  post: {
    type: 'PostSubscriptionPayload'
    args: Record<SubscriptionPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostSubscriptionPayload | null> | prisma.PostSubscriptionPayload | null
  }
  todoItem: {
    type: 'TodoItemSubscriptionPayload'
    args: Record<SubscriptionTodoItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TodoItemSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItemSubscriptionPayload | null> | prisma.TodoItemSubscriptionPayload | null
  }
  tarotArcana: {
    type: 'TarotArcanaSubscriptionPayload'
    args: Record<SubscriptionTarotArcanaArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TarotArcanaSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcanaSubscriptionPayload | null> | prisma.TarotArcanaSubscriptionPayload | null
  }
  tarotExplanation: {
    type: 'TarotExplanationSubscriptionPayload'
    args: Record<SubscriptionTarotExplanationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TarotExplanationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanationSubscriptionPayload | null> | prisma.TarotExplanationSubscriptionPayload | null
  }
  tarotCard: {
    type: 'TarotCardSubscriptionPayload'
    args: Record<SubscriptionTarotCardArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TarotCardSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCardSubscriptionPayload | null> | prisma.TarotCardSubscriptionPayload | null
  }
  tarotPage: {
    type: 'TarotPageSubscriptionPayload'
    args: Record<SubscriptionTarotPageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TarotPageSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPageSubscriptionPayload | null> | prisma.TarotPageSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'name'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostSubscriptionPayload

type PostSubscriptionPayloadObject =
  | PostSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostPreviousValues | null> | prisma.PostPreviousValues | null
  }
}
  

// Types for PostPreviousValues

type PostPreviousValuesObject =
  | PostPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 

type PostPreviousValuesFields =
  | 'id'
  | 'title'
  | 'published'



  

export interface PostPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TodoItemSubscriptionPayload

type TodoItemSubscriptionPayloadObject =
  | TodoItemSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TodoItemSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TodoItemSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TodoItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TodoItem'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TodoItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItem | null> | prisma.TodoItem | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TodoItemPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TodoItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoItemPreviousValues | null> | prisma.TodoItemPreviousValues | null
  }
}
  

// Types for TodoItemPreviousValues

type TodoItemPreviousValuesObject =
  | TodoItemPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 
  | { name: 'done', args?: [] | false, alias?: string  } 

type TodoItemPreviousValuesFields =
  | 'id'
  | 'text'
  | 'done'



  

export interface TodoItemPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  done: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TarotArcanaSubscriptionPayload

type TarotArcanaSubscriptionPayloadObject =
  | TarotArcanaSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TarotArcanaSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TarotArcanaSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotArcanaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TarotArcana'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TarotArcanaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcana | null> | prisma.TarotArcana | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TarotArcanaPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TarotArcanaSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotArcanaPreviousValues | null> | prisma.TarotArcanaPreviousValues | null
  }
}
  

// Types for TarotArcanaPreviousValues

type TarotArcanaPreviousValuesObject =
  | TarotArcanaPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'family', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 

type TarotArcanaPreviousValuesFields =
  | 'id'
  | 'family'
  | 'number'



  

export interface TarotArcanaPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  family: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TarotExplanationSubscriptionPayload

type TarotExplanationSubscriptionPayloadObject =
  | TarotExplanationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TarotExplanationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TarotExplanationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotExplanationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TarotExplanation'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TarotExplanationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanation | null> | prisma.TarotExplanation | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TarotExplanationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TarotExplanationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotExplanationPreviousValues | null> | prisma.TarotExplanationPreviousValues | null
  }
}
  

// Types for TarotExplanationPreviousValues

type TarotExplanationPreviousValuesObject =
  | TarotExplanationPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'source', args?: [] | false, alias?: string  } 

type TarotExplanationPreviousValuesFields =
  | 'id'
  | 'content'
  | 'source'



  

export interface TarotExplanationPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  source: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TarotCardSubscriptionPayload

type TarotCardSubscriptionPayloadObject =
  | TarotCardSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TarotCardSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TarotCardSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotCardSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TarotCard'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TarotCardSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCard | null> | prisma.TarotCard | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TarotCardPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TarotCardSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotCardPreviousValues | null> | prisma.TarotCardPreviousValues | null
  }
}
  

// Types for TarotCardPreviousValues

type TarotCardPreviousValuesObject =
  | TarotCardPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'keyWords', args?: [] | false, alias?: string  } 

type TarotCardPreviousValuesFields =
  | 'id'
  | 'name'
  | 'keyWords'



  

export interface TarotCardPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  keyWords: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  

// Types for TarotPageSubscriptionPayload

type TarotPageSubscriptionPayloadObject =
  | TarotPageSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TarotPageSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TarotPageSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TarotPageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TarotPage'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TarotPageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPage | null> | prisma.TarotPage | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TarotPagePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TarotPageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TarotPagePreviousValues | null> | prisma.TarotPagePreviousValues | null
  }
}
  

// Types for TarotPagePreviousValues

type TarotPagePreviousValuesObject =
  | TarotPagePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'tarotFilterKeyWords', args?: [] | false, alias?: string  } 

type TarotPagePreviousValuesFields =
  | 'id'
  | 'tarotFilterKeyWords'



  

export interface TarotPagePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tarotFilterKeyWords: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface PostWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  published?: boolean | null
  published_not?: boolean | null
  author?: UserWhereInput | null
  AND?: PostWhereInput[]
  OR?: PostWhereInput[]
  NOT?: PostWhereInput[]
}
export type PostWhereInputInputObject =
  | Extract<keyof PostWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  posts_every?: PostWhereInput | null
  posts_some?: PostWhereInput | null
  posts_none?: PostWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'posts_every', alias?: string  } 
  | { name: 'posts_some', alias?: string  } 
  | { name: 'posts_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostWhereUniqueInput {
  id?: string | null
}
export type PostWhereUniqueInputInputObject =
  | Extract<keyof PostWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TodoItemWhereUniqueInput {
  id?: string | null
}
export type TodoItemWhereUniqueInputInputObject =
  | Extract<keyof TodoItemWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TodoItemWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  done?: boolean | null
  done_not?: boolean | null
  AND?: TodoItemWhereInput[]
  OR?: TodoItemWhereInput[]
  NOT?: TodoItemWhereInput[]
}
export type TodoItemWhereInputInputObject =
  | Extract<keyof TodoItemWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'done', alias?: string  } 
  | { name: 'done_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TarotArcanaWhereUniqueInput {
  id?: string | null
}
export type TarotArcanaWhereUniqueInputInputObject =
  | Extract<keyof TarotArcanaWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TarotArcanaWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  family?: string | null
  family_not?: string | null
  family_in?: string[]
  family_not_in?: string[]
  family_lt?: string | null
  family_lte?: string | null
  family_gt?: string | null
  family_gte?: string | null
  family_contains?: string | null
  family_not_contains?: string | null
  family_starts_with?: string | null
  family_not_starts_with?: string | null
  family_ends_with?: string | null
  family_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  AND?: TarotArcanaWhereInput[]
  OR?: TarotArcanaWhereInput[]
  NOT?: TarotArcanaWhereInput[]
}
export type TarotArcanaWhereInputInputObject =
  | Extract<keyof TarotArcanaWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'family', alias?: string  } 
  | { name: 'family_not', alias?: string  } 
  | { name: 'family_in', alias?: string  } 
  | { name: 'family_not_in', alias?: string  } 
  | { name: 'family_lt', alias?: string  } 
  | { name: 'family_lte', alias?: string  } 
  | { name: 'family_gt', alias?: string  } 
  | { name: 'family_gte', alias?: string  } 
  | { name: 'family_contains', alias?: string  } 
  | { name: 'family_not_contains', alias?: string  } 
  | { name: 'family_starts_with', alias?: string  } 
  | { name: 'family_not_starts_with', alias?: string  } 
  | { name: 'family_ends_with', alias?: string  } 
  | { name: 'family_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TarotExplanationWhereUniqueInput {
  id?: string | null
}
export type TarotExplanationWhereUniqueInputInputObject =
  | Extract<keyof TarotExplanationWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TarotExplanationWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  source?: string | null
  source_not?: string | null
  source_in?: string[]
  source_not_in?: string[]
  source_lt?: string | null
  source_lte?: string | null
  source_gt?: string | null
  source_gte?: string | null
  source_contains?: string | null
  source_not_contains?: string | null
  source_starts_with?: string | null
  source_not_starts_with?: string | null
  source_ends_with?: string | null
  source_not_ends_with?: string | null
  cardName?: TarotCardWhereInput | null
  AND?: TarotExplanationWhereInput[]
  OR?: TarotExplanationWhereInput[]
  NOT?: TarotExplanationWhereInput[]
}
export type TarotExplanationWhereInputInputObject =
  | Extract<keyof TarotExplanationWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'source_not', alias?: string  } 
  | { name: 'source_in', alias?: string  } 
  | { name: 'source_not_in', alias?: string  } 
  | { name: 'source_lt', alias?: string  } 
  | { name: 'source_lte', alias?: string  } 
  | { name: 'source_gt', alias?: string  } 
  | { name: 'source_gte', alias?: string  } 
  | { name: 'source_contains', alias?: string  } 
  | { name: 'source_not_contains', alias?: string  } 
  | { name: 'source_starts_with', alias?: string  } 
  | { name: 'source_not_starts_with', alias?: string  } 
  | { name: 'source_ends_with', alias?: string  } 
  | { name: 'source_not_ends_with', alias?: string  } 
  | { name: 'cardName', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TarotCardWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  arcana?: TarotArcanaWhereInput | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  explanation_every?: TarotExplanationWhereInput | null
  explanation_some?: TarotExplanationWhereInput | null
  explanation_none?: TarotExplanationWhereInput | null
  AND?: TarotCardWhereInput[]
  OR?: TarotCardWhereInput[]
  NOT?: TarotCardWhereInput[]
}
export type TarotCardWhereInputInputObject =
  | Extract<keyof TarotCardWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'arcana', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'explanation_every', alias?: string  } 
  | { name: 'explanation_some', alias?: string  } 
  | { name: 'explanation_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TarotCardWhereUniqueInput {
  id?: string | null
}
export type TarotCardWhereUniqueInputInputObject =
  | Extract<keyof TarotCardWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TarotPageWhereUniqueInput {
  id?: string | null
}
export type TarotPageWhereUniqueInputInputObject =
  | Extract<keyof TarotPageWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TarotPageWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  AND?: TarotPageWhereInput[]
  OR?: TarotPageWhereInput[]
  NOT?: TarotPageWhereInput[]
}
export type TarotPageWhereInputInputObject =
  | Extract<keyof TarotPageWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string | null
  name?: string
  posts?: PostCreateManyWithoutAuthorInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  
export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  connect?: PostWhereUniqueInput[]
}
export type PostCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostCreateWithoutAuthorInput {
  id?: string | null
  title?: string
  published?: boolean | null
}
export type PostCreateWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateWithoutAuthorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  name?: string | null
  posts?: PostUpdateManyWithoutAuthorInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  
export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  delete?: PostWhereUniqueInput[]
  connect?: PostWhereUniqueInput[]
  set?: PostWhereUniqueInput[]
  disconnect?: PostWhereUniqueInput[]
  update?: PostUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: PostScalarWhereInput[]
  updateMany?: PostUpdateManyWithWhereNestedInput[]
}
export type PostUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  data?: PostUpdateWithoutAuthorDataInput
}
export type PostUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateWithoutAuthorDataInput {
  title?: string | null
  published?: boolean | null
}
export type PostUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof PostUpdateWithoutAuthorDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  
export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  update?: PostUpdateWithoutAuthorDataInput
  create?: PostCreateWithoutAuthorInput
}
export type PostUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  published?: boolean | null
  published_not?: boolean | null
  AND?: PostScalarWhereInput[]
  OR?: PostScalarWhereInput[]
  NOT?: PostScalarWhereInput[]
}
export type PostScalarWhereInputInputObject =
  | Extract<keyof PostScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostUpdateManyWithWhereNestedInput {
  where?: PostScalarWhereInput
  data?: PostUpdateManyDataInput
}
export type PostUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PostUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateManyDataInput {
  title?: string | null
  published?: boolean | null
}
export type PostUpdateManyDataInputInputObject =
  | Extract<keyof PostUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  name?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PostCreateInput {
  id?: string | null
  title?: string
  published?: boolean | null
  author?: UserCreateOneWithoutPostsInput | null
}
export type PostCreateInputInputObject =
  | Extract<keyof PostCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutPostsInputInputObject =
  | Extract<keyof UserCreateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutPostsInput {
  id?: string | null
  email?: string | null
  name?: string
}
export type UserCreateWithoutPostsInputInputObject =
  | Extract<keyof UserCreateWithoutPostsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PostUpdateInput {
  title?: string | null
  published?: boolean | null
  author?: UserUpdateOneWithoutPostsInput | null
}
export type PostUpdateInputInputObject =
  | Extract<keyof PostUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserUpdateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  update?: UserUpdateWithoutPostsDataInput | null
  upsert?: UserUpsertWithoutPostsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutPostsInputInputObject =
  | Extract<keyof UserUpdateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutPostsDataInput {
  email?: string | null
  name?: string | null
}
export type UserUpdateWithoutPostsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutPostsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserUpsertWithoutPostsInput {
  update?: UserUpdateWithoutPostsDataInput
  create?: UserCreateWithoutPostsInput
}
export type UserUpsertWithoutPostsInputInputObject =
  | Extract<keyof UserUpsertWithoutPostsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostUpdateManyMutationInput {
  title?: string | null
  published?: boolean | null
}
export type PostUpdateManyMutationInputInputObject =
  | Extract<keyof PostUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'published', alias?: string  } 
  
export interface TodoItemCreateInput {
  id?: string | null
  text?: string
  done?: boolean | null
}
export type TodoItemCreateInputInputObject =
  | Extract<keyof TodoItemCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'done', alias?: string  } 
  
export interface TodoItemUpdateInput {
  text?: string | null
  done?: boolean | null
}
export type TodoItemUpdateInputInputObject =
  | Extract<keyof TodoItemUpdateInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'done', alias?: string  } 
  
export interface TodoItemUpdateManyMutationInput {
  text?: string | null
  done?: boolean | null
}
export type TodoItemUpdateManyMutationInputInputObject =
  | Extract<keyof TodoItemUpdateManyMutationInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'done', alias?: string  } 
  
export interface TarotArcanaCreateInput {
  id?: string | null
  family?: string | null
  number?: number
}
export type TarotArcanaCreateInputInputObject =
  | Extract<keyof TarotArcanaCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'family', alias?: string  } 
  | { name: 'number', alias?: string  } 
  
export interface TarotArcanaUpdateInput {
  family?: string | null
  number?: number | null
}
export type TarotArcanaUpdateInputInputObject =
  | Extract<keyof TarotArcanaUpdateInput, string>
  | { name: 'family', alias?: string  } 
  | { name: 'number', alias?: string  } 
  
export interface TarotArcanaUpdateManyMutationInput {
  family?: string | null
  number?: number | null
}
export type TarotArcanaUpdateManyMutationInputInputObject =
  | Extract<keyof TarotArcanaUpdateManyMutationInput, string>
  | { name: 'family', alias?: string  } 
  | { name: 'number', alias?: string  } 
  
export interface TarotExplanationCreateInput {
  id?: string | null
  content?: string | null
  source?: string
  cardName?: TarotCardCreateOneWithoutExplanationInput | null
}
export type TarotExplanationCreateInputInputObject =
  | Extract<keyof TarotExplanationCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'cardName', alias?: string  } 
  
export interface TarotCardCreateOneWithoutExplanationInput {
  create?: TarotCardCreateWithoutExplanationInput | null
  connect?: TarotCardWhereUniqueInput | null
}
export type TarotCardCreateOneWithoutExplanationInputInputObject =
  | Extract<keyof TarotCardCreateOneWithoutExplanationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TarotCardCreateWithoutExplanationInput {
  id?: string | null
  arcana?: TarotArcanaCreateOneInput | null
  name?: string
  keyWords?: TarotCardCreatekeyWordsInput | null
}
export type TarotCardCreateWithoutExplanationInputInputObject =
  | Extract<keyof TarotCardCreateWithoutExplanationInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'arcana', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'keyWords', alias?: string  } 
  
export interface TarotArcanaCreateOneInput {
  create?: TarotArcanaCreateInput | null
  connect?: TarotArcanaWhereUniqueInput | null
}
export type TarotArcanaCreateOneInputInputObject =
  | Extract<keyof TarotArcanaCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TarotCardCreatekeyWordsInput {
  set?: string[]
}
export type TarotCardCreatekeyWordsInputInputObject =
  | Extract<keyof TarotCardCreatekeyWordsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface TarotExplanationUpdateInput {
  content?: string | null
  source?: string | null
  cardName?: TarotCardUpdateOneWithoutExplanationInput | null
}
export type TarotExplanationUpdateInputInputObject =
  | Extract<keyof TarotExplanationUpdateInput, string>
  | { name: 'content', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'cardName', alias?: string  } 
  
export interface TarotCardUpdateOneWithoutExplanationInput {
  create?: TarotCardCreateWithoutExplanationInput | null
  update?: TarotCardUpdateWithoutExplanationDataInput | null
  upsert?: TarotCardUpsertWithoutExplanationInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TarotCardWhereUniqueInput | null
}
export type TarotCardUpdateOneWithoutExplanationInputInputObject =
  | Extract<keyof TarotCardUpdateOneWithoutExplanationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TarotCardUpdateWithoutExplanationDataInput {
  arcana?: TarotArcanaUpdateOneInput | null
  name?: string | null
  keyWords?: TarotCardUpdatekeyWordsInput | null
}
export type TarotCardUpdateWithoutExplanationDataInputInputObject =
  | Extract<keyof TarotCardUpdateWithoutExplanationDataInput, string>
  | { name: 'arcana', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'keyWords', alias?: string  } 
  
export interface TarotArcanaUpdateOneInput {
  create?: TarotArcanaCreateInput | null
  update?: TarotArcanaUpdateDataInput | null
  upsert?: TarotArcanaUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TarotArcanaWhereUniqueInput | null
}
export type TarotArcanaUpdateOneInputInputObject =
  | Extract<keyof TarotArcanaUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TarotArcanaUpdateDataInput {
  family?: string | null
  number?: number | null
}
export type TarotArcanaUpdateDataInputInputObject =
  | Extract<keyof TarotArcanaUpdateDataInput, string>
  | { name: 'family', alias?: string  } 
  | { name: 'number', alias?: string  } 
  
export interface TarotArcanaUpsertNestedInput {
  update?: TarotArcanaUpdateDataInput
  create?: TarotArcanaCreateInput
}
export type TarotArcanaUpsertNestedInputInputObject =
  | Extract<keyof TarotArcanaUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TarotCardUpdatekeyWordsInput {
  set?: string[]
}
export type TarotCardUpdatekeyWordsInputInputObject =
  | Extract<keyof TarotCardUpdatekeyWordsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface TarotCardUpsertWithoutExplanationInput {
  update?: TarotCardUpdateWithoutExplanationDataInput
  create?: TarotCardCreateWithoutExplanationInput
}
export type TarotCardUpsertWithoutExplanationInputInputObject =
  | Extract<keyof TarotCardUpsertWithoutExplanationInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TarotExplanationUpdateManyMutationInput {
  content?: string | null
  source?: string | null
}
export type TarotExplanationUpdateManyMutationInputInputObject =
  | Extract<keyof TarotExplanationUpdateManyMutationInput, string>
  | { name: 'content', alias?: string  } 
  | { name: 'source', alias?: string  } 
  
export interface TarotCardCreateInput {
  id?: string | null
  arcana?: TarotArcanaCreateOneInput | null
  name?: string
  keyWords?: TarotCardCreatekeyWordsInput | null
  explanation?: TarotExplanationCreateManyWithoutCardNameInput | null
}
export type TarotCardCreateInputInputObject =
  | Extract<keyof TarotCardCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'arcana', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'keyWords', alias?: string  } 
  | { name: 'explanation', alias?: string  } 
  
export interface TarotExplanationCreateManyWithoutCardNameInput {
  create?: TarotExplanationCreateWithoutCardNameInput[]
  connect?: TarotExplanationWhereUniqueInput[]
}
export type TarotExplanationCreateManyWithoutCardNameInputInputObject =
  | Extract<keyof TarotExplanationCreateManyWithoutCardNameInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TarotExplanationCreateWithoutCardNameInput {
  id?: string | null
  content?: string | null
  source?: string
}
export type TarotExplanationCreateWithoutCardNameInputInputObject =
  | Extract<keyof TarotExplanationCreateWithoutCardNameInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'source', alias?: string  } 
  
export interface TarotCardUpdateInput {
  arcana?: TarotArcanaUpdateOneInput | null
  name?: string | null
  keyWords?: TarotCardUpdatekeyWordsInput | null
  explanation?: TarotExplanationUpdateManyWithoutCardNameInput | null
}
export type TarotCardUpdateInputInputObject =
  | Extract<keyof TarotCardUpdateInput, string>
  | { name: 'arcana', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'keyWords', alias?: string  } 
  | { name: 'explanation', alias?: string  } 
  
export interface TarotExplanationUpdateManyWithoutCardNameInput {
  create?: TarotExplanationCreateWithoutCardNameInput[]
  delete?: TarotExplanationWhereUniqueInput[]
  connect?: TarotExplanationWhereUniqueInput[]
  set?: TarotExplanationWhereUniqueInput[]
  disconnect?: TarotExplanationWhereUniqueInput[]
  update?: TarotExplanationUpdateWithWhereUniqueWithoutCardNameInput[]
  upsert?: TarotExplanationUpsertWithWhereUniqueWithoutCardNameInput[]
  deleteMany?: TarotExplanationScalarWhereInput[]
  updateMany?: TarotExplanationUpdateManyWithWhereNestedInput[]
}
export type TarotExplanationUpdateManyWithoutCardNameInputInputObject =
  | Extract<keyof TarotExplanationUpdateManyWithoutCardNameInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TarotExplanationUpdateWithWhereUniqueWithoutCardNameInput {
  where?: TarotExplanationWhereUniqueInput
  data?: TarotExplanationUpdateWithoutCardNameDataInput
}
export type TarotExplanationUpdateWithWhereUniqueWithoutCardNameInputInputObject =
  | Extract<keyof TarotExplanationUpdateWithWhereUniqueWithoutCardNameInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TarotExplanationUpdateWithoutCardNameDataInput {
  content?: string | null
  source?: string | null
}
export type TarotExplanationUpdateWithoutCardNameDataInputInputObject =
  | Extract<keyof TarotExplanationUpdateWithoutCardNameDataInput, string>
  | { name: 'content', alias?: string  } 
  | { name: 'source', alias?: string  } 
  
export interface TarotExplanationUpsertWithWhereUniqueWithoutCardNameInput {
  where?: TarotExplanationWhereUniqueInput
  update?: TarotExplanationUpdateWithoutCardNameDataInput
  create?: TarotExplanationCreateWithoutCardNameInput
}
export type TarotExplanationUpsertWithWhereUniqueWithoutCardNameInputInputObject =
  | Extract<keyof TarotExplanationUpsertWithWhereUniqueWithoutCardNameInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TarotExplanationScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  source?: string | null
  source_not?: string | null
  source_in?: string[]
  source_not_in?: string[]
  source_lt?: string | null
  source_lte?: string | null
  source_gt?: string | null
  source_gte?: string | null
  source_contains?: string | null
  source_not_contains?: string | null
  source_starts_with?: string | null
  source_not_starts_with?: string | null
  source_ends_with?: string | null
  source_not_ends_with?: string | null
  AND?: TarotExplanationScalarWhereInput[]
  OR?: TarotExplanationScalarWhereInput[]
  NOT?: TarotExplanationScalarWhereInput[]
}
export type TarotExplanationScalarWhereInputInputObject =
  | Extract<keyof TarotExplanationScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'source', alias?: string  } 
  | { name: 'source_not', alias?: string  } 
  | { name: 'source_in', alias?: string  } 
  | { name: 'source_not_in', alias?: string  } 
  | { name: 'source_lt', alias?: string  } 
  | { name: 'source_lte', alias?: string  } 
  | { name: 'source_gt', alias?: string  } 
  | { name: 'source_gte', alias?: string  } 
  | { name: 'source_contains', alias?: string  } 
  | { name: 'source_not_contains', alias?: string  } 
  | { name: 'source_starts_with', alias?: string  } 
  | { name: 'source_not_starts_with', alias?: string  } 
  | { name: 'source_ends_with', alias?: string  } 
  | { name: 'source_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TarotExplanationUpdateManyWithWhereNestedInput {
  where?: TarotExplanationScalarWhereInput
  data?: TarotExplanationUpdateManyDataInput
}
export type TarotExplanationUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TarotExplanationUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TarotExplanationUpdateManyDataInput {
  content?: string | null
  source?: string | null
}
export type TarotExplanationUpdateManyDataInputInputObject =
  | Extract<keyof TarotExplanationUpdateManyDataInput, string>
  | { name: 'content', alias?: string  } 
  | { name: 'source', alias?: string  } 
  
export interface TarotCardUpdateManyMutationInput {
  name?: string | null
  keyWords?: TarotCardUpdatekeyWordsInput | null
}
export type TarotCardUpdateManyMutationInputInputObject =
  | Extract<keyof TarotCardUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'keyWords', alias?: string  } 
  
export interface TarotPageCreateInput {
  id?: string | null
  tarotFilterKeyWords?: TarotPageCreatetarotFilterKeyWordsInput | null
}
export type TarotPageCreateInputInputObject =
  | Extract<keyof TarotPageCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'tarotFilterKeyWords', alias?: string  } 
  
export interface TarotPageCreatetarotFilterKeyWordsInput {
  set?: string[]
}
export type TarotPageCreatetarotFilterKeyWordsInputInputObject =
  | Extract<keyof TarotPageCreatetarotFilterKeyWordsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface TarotPageUpdateInput {
  tarotFilterKeyWords?: TarotPageUpdatetarotFilterKeyWordsInput | null
}
export type TarotPageUpdateInputInputObject =
  | Extract<keyof TarotPageUpdateInput, string>
  | { name: 'tarotFilterKeyWords', alias?: string  } 
  
export interface TarotPageUpdatetarotFilterKeyWordsInput {
  set?: string[]
}
export type TarotPageUpdatetarotFilterKeyWordsInputInputObject =
  | Extract<keyof TarotPageUpdatetarotFilterKeyWordsInput, string>
  | { name: 'set', alias?: string  } 
  
export interface TarotPageUpdateManyMutationInput {
  tarotFilterKeyWords?: TarotPageUpdatetarotFilterKeyWordsInput | null
}
export type TarotPageUpdateManyMutationInputInputObject =
  | Extract<keyof TarotPageUpdateManyMutationInput, string>
  | { name: 'tarotFilterKeyWords', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostWhereInput | null
  AND?: PostSubscriptionWhereInput[]
  OR?: PostSubscriptionWhereInput[]
  NOT?: PostSubscriptionWhereInput[]
}
export type PostSubscriptionWhereInputInputObject =
  | Extract<keyof PostSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TodoItemSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TodoItemWhereInput | null
  AND?: TodoItemSubscriptionWhereInput[]
  OR?: TodoItemSubscriptionWhereInput[]
  NOT?: TodoItemSubscriptionWhereInput[]
}
export type TodoItemSubscriptionWhereInputInputObject =
  | Extract<keyof TodoItemSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TarotArcanaSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TarotArcanaWhereInput | null
  AND?: TarotArcanaSubscriptionWhereInput[]
  OR?: TarotArcanaSubscriptionWhereInput[]
  NOT?: TarotArcanaSubscriptionWhereInput[]
}
export type TarotArcanaSubscriptionWhereInputInputObject =
  | Extract<keyof TarotArcanaSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TarotExplanationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TarotExplanationWhereInput | null
  AND?: TarotExplanationSubscriptionWhereInput[]
  OR?: TarotExplanationSubscriptionWhereInput[]
  NOT?: TarotExplanationSubscriptionWhereInput[]
}
export type TarotExplanationSubscriptionWhereInputInputObject =
  | Extract<keyof TarotExplanationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TarotCardSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TarotCardWhereInput | null
  AND?: TarotCardSubscriptionWhereInput[]
  OR?: TarotCardSubscriptionWhereInput[]
  NOT?: TarotCardSubscriptionWhereInput[]
}
export type TarotCardSubscriptionWhereInputInputObject =
  | Extract<keyof TarotCardSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TarotPageSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TarotPageWhereInput | null
  AND?: TarotPageSubscriptionWhereInput[]
  OR?: TarotPageSubscriptionWhereInput[]
  NOT?: TarotPageSubscriptionWhereInput[]
}
export type TarotPageSubscriptionWhereInputInputObject =
  | Extract<keyof TarotPageSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type PostOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'published_ASC'
  | 'published_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TodoItemOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'text_ASC'
  | 'text_DESC'
  | 'done_ASC'
  | 'done_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TarotArcanaOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'family_ASC'
  | 'family_DESC'
  | 'number_ASC'
  | 'number_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TarotExplanationOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'source_ASC'
  | 'source_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TarotCardOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TarotPageOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  