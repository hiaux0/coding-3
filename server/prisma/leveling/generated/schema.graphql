### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type Mutation {
  createDraft(authorId: ID, title: String): Post!
  createTarotCard(data: TarotCardCreateInput!): TarotCard!
  createTodoItem(data: TodoItemCreateInput!): TodoItem!
  createUser(data: UserCreateInput!): User!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteTodoItem(where: TodoItemWhereUniqueInput!): TodoItem
  publish(id: ID): Post
  updateTarotCard(data: TarotCardUpdateInput!, where: TarotCardWhereUniqueInput!): TarotCard
  updateTarotExplanation(data: TarotExplanationUpdateInput!, where: TarotExplanationWhereUniqueInput!): TarotExplanation
  updateTodoItem(data: TodoItemUpdateInput!, where: TodoItemWhereUniqueInput!): TodoItem
}

type Post {
  author: User
  id: ID!
  published: Boolean!
  title: String!
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  id: ID
  published: Boolean
  title: String!
}

enum PostOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: Boolean
  published_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  feed: [Post!]!
  post(where: PostWhereUniqueInput!): Post
  postsByUser(email: String): [Post!]!
  tarotCards(after: String, before: String, first: Int, last: Int, orderBy: TarotCardOrderByInput, skip: Int, where: TarotCardWhereInput): [TarotCard!]!
  todoItems(after: String, before: String, first: Int, last: Int, orderBy: TodoItemOrderByInput, skip: Int, where: TodoItemWhereInput): [TodoItem!]!
}

type TarotArcana {
  family: String
  id: ID!
  number: Int!
}

input TarotArcanaCreateInput {
  family: String
  id: ID
  number: Int!
}

input TarotArcanaCreateOneInput {
  connect: TarotArcanaWhereUniqueInput
  create: TarotArcanaCreateInput
}

input TarotArcanaUpdateDataInput {
  family: String
  number: Int
}

input TarotArcanaUpdateOneInput {
  connect: TarotArcanaWhereUniqueInput
  create: TarotArcanaCreateInput
  delete: Boolean
  disconnect: Boolean
  update: TarotArcanaUpdateDataInput
  upsert: TarotArcanaUpsertNestedInput
}

input TarotArcanaUpsertNestedInput {
  create: TarotArcanaCreateInput!
  update: TarotArcanaUpdateDataInput!
}

input TarotArcanaWhereInput {
  AND: [TarotArcanaWhereInput!]
  family: String
  family_contains: String
  family_ends_with: String
  family_gt: String
  family_gte: String
  family_in: [String!]
  family_lt: String
  family_lte: String
  family_not: String
  family_not_contains: String
  family_not_ends_with: String
  family_not_in: [String!]
  family_not_starts_with: String
  family_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [TarotArcanaWhereInput!]
  number: Int
  number_gt: Int
  number_gte: Int
  number_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_not: Int
  number_not_in: [Int!]
  OR: [TarotArcanaWhereInput!]
}

input TarotArcanaWhereUniqueInput {
  id: ID
}

type TarotCard {
  arcana: TarotArcana
  explanation(after: String, before: String, first: Int, last: Int, orderBy: TarotExplanationOrderByInput, skip: Int, where: TarotExplanationWhereInput): [TarotExplanation!]
  id: ID!
  keyWords: [String!]!
  name: String!
}

input TarotCardCreateInput {
  arcana: TarotArcanaCreateOneInput
  explanation: TarotExplanationCreateManyWithoutCardNameInput
  id: ID
  keyWords: TarotCardCreatekeyWordsInput
  name: String!
}

input TarotCardCreatekeyWordsInput {
  set: [String!]
}

input TarotCardCreateWithoutExplanationInput {
  arcana: TarotArcanaCreateOneInput
  id: ID
  keyWords: TarotCardCreatekeyWordsInput
  name: String!
}

enum TarotCardOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TarotCardUpdateInput {
  arcana: TarotArcanaUpdateOneInput
  explanation: TarotExplanationUpdateManyWithoutCardNameInput
  keyWords: TarotCardUpdatekeyWordsInput
  name: String
}

input TarotCardUpdatekeyWordsInput {
  set: [String!]
}

input TarotCardUpdateOneWithoutExplanationInput {
  connect: TarotCardWhereUniqueInput
  create: TarotCardCreateWithoutExplanationInput
  delete: Boolean
  disconnect: Boolean
  update: TarotCardUpdateWithoutExplanationDataInput
  upsert: TarotCardUpsertWithoutExplanationInput
}

input TarotCardUpdateWithoutExplanationDataInput {
  arcana: TarotArcanaUpdateOneInput
  keyWords: TarotCardUpdatekeyWordsInput
  name: String
}

input TarotCardUpsertWithoutExplanationInput {
  create: TarotCardCreateWithoutExplanationInput!
  update: TarotCardUpdateWithoutExplanationDataInput!
}

input TarotCardWhereInput {
  AND: [TarotCardWhereInput!]
  arcana: TarotArcanaWhereInput
  explanation_every: TarotExplanationWhereInput
  explanation_none: TarotExplanationWhereInput
  explanation_some: TarotExplanationWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TarotCardWhereInput!]
  OR: [TarotCardWhereInput!]
}

input TarotCardWhereUniqueInput {
  id: ID
}

type TarotExplanation {
  cardName: TarotCard
  content: String!
  id: ID!
  source: String
}

input TarotExplanationCreateManyWithoutCardNameInput {
  connect: [TarotExplanationWhereUniqueInput!]
  create: [TarotExplanationCreateWithoutCardNameInput!]
}

input TarotExplanationCreateWithoutCardNameInput {
  content: String!
  id: ID
  source: String
}

enum TarotExplanationOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  source_ASC
  source_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TarotExplanationScalarWhereInput {
  AND: [TarotExplanationScalarWhereInput!]
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [TarotExplanationScalarWhereInput!]
  OR: [TarotExplanationScalarWhereInput!]
  source: String
  source_contains: String
  source_ends_with: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_ends_with: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_starts_with: String
}

input TarotExplanationUpdateInput {
  cardName: TarotCardUpdateOneWithoutExplanationInput
  content: String
  source: String
}

input TarotExplanationUpdateManyDataInput {
  content: String
  source: String
}

input TarotExplanationUpdateManyWithoutCardNameInput {
  connect: [TarotExplanationWhereUniqueInput!]
  create: [TarotExplanationCreateWithoutCardNameInput!]
  delete: [TarotExplanationWhereUniqueInput!]
  deleteMany: [TarotExplanationScalarWhereInput!]
  disconnect: [TarotExplanationWhereUniqueInput!]
  set: [TarotExplanationWhereUniqueInput!]
  update: [TarotExplanationUpdateWithWhereUniqueWithoutCardNameInput!]
  updateMany: [TarotExplanationUpdateManyWithWhereNestedInput!]
  upsert: [TarotExplanationUpsertWithWhereUniqueWithoutCardNameInput!]
}

input TarotExplanationUpdateManyWithWhereNestedInput {
  data: TarotExplanationUpdateManyDataInput!
  where: TarotExplanationScalarWhereInput!
}

input TarotExplanationUpdateWithoutCardNameDataInput {
  content: String
  source: String
}

input TarotExplanationUpdateWithWhereUniqueWithoutCardNameInput {
  data: TarotExplanationUpdateWithoutCardNameDataInput!
  where: TarotExplanationWhereUniqueInput!
}

input TarotExplanationUpsertWithWhereUniqueWithoutCardNameInput {
  create: TarotExplanationCreateWithoutCardNameInput!
  update: TarotExplanationUpdateWithoutCardNameDataInput!
  where: TarotExplanationWhereUniqueInput!
}

input TarotExplanationWhereInput {
  AND: [TarotExplanationWhereInput!]
  cardName: TarotCardWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [TarotExplanationWhereInput!]
  OR: [TarotExplanationWhereInput!]
  source: String
  source_contains: String
  source_ends_with: String
  source_gt: String
  source_gte: String
  source_in: [String!]
  source_lt: String
  source_lte: String
  source_not: String
  source_not_contains: String
  source_not_ends_with: String
  source_not_in: [String!]
  source_not_starts_with: String
  source_starts_with: String
}

input TarotExplanationWhereUniqueInput {
  id: ID
}

type TodoItem {
  done: Boolean
  id: ID!
  text: String!
}

input TodoItemCreateInput {
  done: Boolean
  id: ID
  text: String!
}

enum TodoItemOrderByInput {
  createdAt_ASC
  createdAt_DESC
  done_ASC
  done_DESC
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TodoItemUpdateInput {
  done: Boolean
  text: String
}

input TodoItemWhereInput {
  AND: [TodoItemWhereInput!]
  done: Boolean
  done_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [TodoItemWhereInput!]
  OR: [TodoItemWhereInput!]
  text: String
  text_contains: String
  text_ends_with: String
  text_gt: String
  text_gte: String
  text_in: [String!]
  text_lt: String
  text_lte: String
  text_not: String
  text_not_contains: String
  text_not_ends_with: String
  text_not_in: [String!]
  text_not_starts_with: String
  text_starts_with: String
}

input TodoItemWhereUniqueInput {
  id: ID
}

type User {
  email: String
  id: ID!
  name: String!
  posts(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]
}

input UserCreateInput {
  email: String
  id: ID
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts_every: PostWhereInput
  posts_none: PostWhereInput
  posts_some: PostWhereInput
}
